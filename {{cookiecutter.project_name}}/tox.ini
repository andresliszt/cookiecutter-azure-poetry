;region  =================================== black =====================================

;endregion ================================= black =====================================

;region  ============================== flake8 & autopep8 ==============================

[flake8]
max-line-length = 79
ignore =
  # line too long is handled by pylint
  E501,
  # not used import is handled by pylint
  F401,
  # function-redefined is handled by pylint
  F811,
  # singleton-comparison is handled by pylint
  E712,
  # undefined-name is handled by pylint
  F821,

  W503,
  # whitespace before ':'
  E203
show_source = true
statistics = true
exclude =
  .git,
  logs,
  dist,
  .vscode,
  .venv,
  .tox,
  pip-wheel-metadata,
  .mypy-cache,
  .hypothesis,
  **/__pycache__,
  docs/source/conf.py,
  **/*.bkp
  petri.egg-info,
  data
;region  ======================= autopep8 =======================
in-place = true
recursive = true
;endregion ===================== autopep8 =======================

;endregion ============================ flake8 & autopep8 ==============================

;region  ==================================== mypy =====================================

[mypy]
ignore_missing_imports = True

;endregion ================================== mypy =====================================

;region ================================= pylint ====================================

[MASTER]

extension-pkg-whitelist=pydantic

[MESSAGES CONTROL]
disable =
  # black y C0330 issue. See: https://github.com/python/black/issues/48
  C0330,
  # R0801 Imports at init
  R0801,
  # Invalid-names
  C0103,
  # Too few public methods
  R0903 

[FORMAT]
ignore-long-lines=\s*(# )?<?https?://\S+>?
indent-string = "    "
good-names =
  db,
  k,
  v,
  pkg,
  fp

[MISCELLANEOUS]
notes=
  FIXME,
  TODO,

[VARIABLES]

# Indicates if we should check the unused import in files __init__
init-import=yes

;endregion ================================= pylint ====================================





;region  ==================================== isort ====================================

[isort]
line_length=79
force_single_line=True
sections=FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
no_lines_before=STDLIB,LOCALFOLDER

;endregion ================================== isort ====================================


;region  =================================== bandit ====================================

[bandit]
skips=B101
;endregion ================================== bandit =====================================


[tox]
isolated_build = True

[testenv]
envdir = {toxinidir}/.venv
skip_install = true
skipdist = True
whitelist_externals = poetry
basepython = {{cookiecutter.base_python_path}}
commands =
  {[testenv:clear]commands}
  python -m pip install --upgrade pip
  poetry install -vvv
list_dependencies_command = python -c 'print("\n"*2+"-"*10+"O"+"-"*10+"\n")'
recreate = False

[testenv:venv]
description = "Create a virtual environment"         

[testenv:clear]
description = "Delete all temporary files"
commands =
  python -c \
    "from pathlib import Path ; \
    from shutil import rmtree ; \
    rm = lambda p: p.unlink() if p.is_file() else rmtree(p) ; \
    glob = Path(r'{toxinidir}').glob ; \
    [rm(f) for f in glob(str(Path('docs/source/**/*.rst')))] ; \
    [rm(f) for f in glob(str(Path('**/.mypy_cache')))] ; \
    [rm(f) for f in glob(str(Path('**/.tox')))] ; \
    [rm(f) for f in glob(str(Path('{{cookiecutter.package_name}}.egg-info')))] ; \
    [rm(f) for f in glob(str(Path('examples/**/*.egg-info')))] ; \
    [rm(f) for f in glob(str(Path('examples/**/*.dist-info')))] ; \
    [rm(f) for f in glob(str(Path('**/tests/**/pip-wheel-metadata')))] ; \
    [rm(f) for f in glob('dist')] ; \
    [rm(f) for f in glob(str(Path('logs/**/*.*')))] ; \
    [rm(f) for f in glob(str(Path('**/__pycache__')))] ; \
    [rm(f) for f in glob(str(Path('**/.pytest_cache')))] ; \
    "

[testenv:autopep8]
description = "Reformat using autopep8"
commands = autopep8 '{{cookiecutter.package_name}}'

[testenv:isort]
description = "Reformat de código usando using isort"
commands = isort -rc --atomic '{{cookiecutter.package_name}}'

[testenv:black]
description = "Reformat using black"
commands = 
  black  '{{cookiecutter.package_name}}'

[testenv:docformatter]
description = "Reformat using docformatter"
commands =
  docformatter --in-place --recursive --wrap-summaries 0 --blank '{{cookiecutter.package_name}}'

[testenv:format]
description = "Reformat de código usando isort,autopep8,black formatter(s)"
commands =
  {[testenv:autopep8]commands}
  {[testenv:isort]commands}
  {[testenv:black]commands}
  {[testenv:docformatter]commands}

;region  =================================== linting ===================================
[testenv:flake8]
description = "Lint with flake8"
commands =
  flake8 --config=tox.ini '{{cookiecutter.package_name}}'

[testenv:pylint]
description = "Lint with pylint"
commands =
  pylint --rcfile=tox.ini '{{cookiecutter.package_name}}'

[testenv:mypy]
description = "Lint with con mypy"
commands =
  mypy --config-file=tox.ini -p '{{cookiecutter.package_name}}'

[testenv:bandit]
description = "Lint with bandit"
commands =
  bandit \
    --ini=tox.ini \
    --quiet \
    --recursive \
    -x **/.venv/**/*.py \
    '{{cookiecutter.package_name}}'
  
[testenv:lint]
description = "Lint code with flake8,pylint,mypy, and bandit"
commands =
  {[testenv:flake8]commands}
  {[testenv:mypy]commands}
  {[testenv:bandit]commands}
  {[testenv:pylint]commands}
ignore_errors = True
;endregion ================================= linting ===================================
